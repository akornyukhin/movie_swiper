[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/serviceWorkerRegistration.js":"4","/app/src/context/game.js":"5","/app/src/context/socket.js":"6","/app/src/components/Home.js":"7","/app/src/components/SwipeCard.js":"8","/app/src/components/Lobby.js":"9"},{"size":818,"mtime":1611925070721,"results":"10","hashOfConfig":"11"},{"size":364,"mtime":1611925070721,"results":"12","hashOfConfig":"11"},{"size":1334,"mtime":1612477387665,"results":"13","hashOfConfig":"11"},{"size":5064,"mtime":1611925070721,"results":"14","hashOfConfig":"11"},{"size":161,"mtime":1612134066970,"results":"15","hashOfConfig":"11"},{"size":168,"mtime":1611925070721,"results":"16","hashOfConfig":"11"},{"size":2308,"mtime":1612474076281,"results":"17","hashOfConfig":"11"},{"size":4379,"mtime":1612477373721,"results":"18","hashOfConfig":"11"},{"size":1858,"mtime":1612477373721,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"emjnck",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"/app/src/index.js",[],["43","44"],"/app/src/reportWebVitals.js",[],"/app/src/App.js",[],"/app/src/serviceWorkerRegistration.js",[],"/app/src/context/game.js",[],"/app/src/context/socket.js",[],"/app/src/components/Home.js",["45"],"import React, { useState } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { io } from 'socket.io-client';\nimport { useHistory } from 'react-router-dom';\nimport { useSocket } from '../context/socket';\nimport { Typography } from '@material-ui/core';\n\n\nexport default function Home() {\n    const { socket } = useSocket();\n    \n    const [roomId, setRoomId] = useState('');\n    const [hostName, setHostName] = useState('');\n    const [name, setName] = useState('');\n\n    const history = useHistory();\n  \n    function createRoom(event) {\n      socket.emit('create', hostName, (response) => {\n        history.push({pathname: `/lobby/${response[0]}`, state: { players: response[1], admin: response[2] }})\n      })\n    }\n  \n    function connectToRoom() {\n      socket.emit('connect_to_room', roomId, name, (response) => {\n        console.log(response)\n        history.push({pathname: `/lobby/${roomId}`, state: { players: response[0], admin: response[1] }})\n      })\n    }\n  \n    return (\n    <Grid container direction='column' justify='center' spacing={3} style={{paddingTop: 150}}>\n      <Grid item>\n        <TextField fullWidth={true} label=\"Host Name\" value={hostName} onChange={e => { setHostName(e.target.value) }} />\n      </Grid>\n      <Grid item>\n        <Button fullWidth={true} variant=\"contained\" color=\"primary\" onClick={createRoom}>\n            Create room\n        </Button>\n      </Grid>\n      <Grid item >\n        <Typography variant='body1' align='center'>---or join room---</Typography>\n      </Grid>\n      <Grid item container direction='column' spacing={2}>\n        <Grid item>\n          <TextField fullWidth={true} label=\"Room ID\" value={roomId} onChange={e => { setRoomId(e.target.value) }} />\n        </Grid>\n        <Grid item>\n          <TextField fullWidth={true} label=\"Your Name\" value={name} onChange={e => { setName(e.target.value) }} />\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" fullWidth={true} color=\"secondary\" onClick={connectToRoom}>\n              Connect\n          </Button> \n        </Grid>\n      </Grid>\n      {/* <Grid item>\n        <div>Number of players in room: {numberOfPlayers}</div>\n      </Grid> */}\n    </Grid>\n    );\n}\n","/app/src/components/SwipeCard.js",["46","47","48"],"import React, { useState, useRef, useMemo } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport Grid from '@material-ui/core/Grid';\nimport '../styles/SwipeCard.css';\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { useSocket } from '../context/socket';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Carousel from 'react-material-ui-carousel';\n\nconst alreadyRemoved = []\nexport default function SwipeCard() {\n\n    const location = useLocation();\n\n    const { id } = useParams();\n    const { socket } = useSocket();\n\n    const [gameMovies, setGameMovies] = useState(location.state.movies);\n    const [matchedMovies, setMatchedMovies] = useState([]);\n\n    const childRefs = useMemo(() => Array(gameMovies.length).fill(0).map(i => React.createRef()), [])\n\n    function swiped(direction, movieTitle) {\n        // console.log('removing: ' + movieTitle)\n        alreadyRemoved.push(movieTitle)\n        if (direction === 'right') {\n            socket.emit('right_swipe', {\"room_id\": id, \"movie_title\": movieTitle}, (response) => {\n                // console.log(response)\n                setMatchedMovies(response[1])\n                // console.log(matchedMovies)\n              })\n        }\n      }\n    // function onSwipe(direction, movieTitle) {\n    //     if (direction === 'right') {\n    //         socket.emit('right swipe', {\"room_id\": id, \"movie_title\": movieTitle}, (response) => {\n    //             console.log(response)\n    //           })\n    //     }\n    //   }\n\n    function swipe(direction) {\n        const cardsLeft = gameMovies.filter(movie => !alreadyRemoved.includes(movie.name))\n        if (cardsLeft.length) {\n            const toBeRemoved = cardsLeft[cardsLeft.length - 1].name // Find the card object to be removed\n            const index = gameMovies.map(movie => movie.name).indexOf(toBeRemoved) // Find the index of which to make the reference to\n            alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n            childRefs[index].current.swipe(direction) // Swipe the card!\n        }\n    }\n\n    socket.on(\"check_match\", (response) => {\n        // console.log(response);\n        setMatchedMovies(response.matched_movies);\n    })\n\n    return (\n        <div>\n            {/* <Typography variant=\"h4\" color=\"initial\" align='center'>Tinder cards</Typography> */}\n            <Typography variant=\"h4\" color=\"initial\" align='center'>ID: {id}</Typography>\n            <Grid container justifyContent='center' justify='center'>\n                {gameMovies.map((movie, index) => (\n                    <TinderCard\n                    className='swipe'\n                    ref={childRefs[index]}\n                    key={movie.name}\n                    onSwipe={(direction) => swiped(direction, movie.name)}\n                    preventSwipe={['up', 'down']}>\n                        <div \n                        style={{ backgroundImage: `url(${movie.poster_src})` }}\n                        className='card'>\n                            {/* <h3>{movie.name}</h3> */}\n                        </div>\n                        {/* <div>\n                            <h3>{movie.description}</h3>  \n                        </div> */}\n                    </TinderCard>\n                ))}  \n            <div className='bottom'>\n                <div className='buttons'>\n                    <Button variant=\"contained\" color=\"default\" onClick={() => swipe('left')}>\n                    Left\n                    </Button>\n                    <Button variant=\"contained\" color=\"default\" onClick={() => swipe('right')}>\n                    Right\n                    </Button>\n                </div>\n                 {/* <div className='movies'> */}\n                 <Carousel animation='slide' autoPlay={false}>\n                    {matchedMovies.length && matchedMovies.map((movie, index) => (\n                            <>\n                            <div className='movie'>\n                                {movie}\n                                <p>Description</p>\n                            </div>\n                            </>\n                        ))}\n                </Carousel>  \n                {/* </div> */}\n            </div>\n            </Grid>\n            \n        </div>\n    )\n}\n",["49","50"],"/app/src/components/Lobby.js",["51"],"import React, { useState } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button';\nimport { useParams } from \"react-router-dom\";\nimport { useSocket } from '../context/socket';\nimport { useLocation, useHistory } from 'react-router-dom';\n\n\n\nexport default function Lobby() {\n\n    const location = useLocation();\n    const history = useHistory();\n\n    const { id } = useParams();\n    const { socket } = useSocket();\n\n    const [players, setPlayers] = useState(location.state.players.players);\n    const [admin, setAdmin] = useState(location.state.admin);\n\n    socket.on(\"join_room\", (response) => {\n        setPlayers(response.room.players);\n      });\n\n    socket.on(\"game_started\", (response) => {\n        history.push({pathname: `/game/${id}`, state: { movies: response.movies }});\n    })\n\n    function startGame() {\n        socket.emit('start_game', id);\n    }\n    \n    return (\n        <Grid container direction='column' justify='center' spacing={3} style={{paddingTop: 150}}>\n            <Grid item>\n                <Typography variant=\"h6\" color=\"initial\">Room id: {id}</Typography>\n            </Grid>\n            <Grid item>\n                { admin ? \n                    (<Button variant=\"contained\" fullWidth={true} color=\"primary\" onClick={startGame}>\n                        Start\n                    </Button>) :\n                    (<Typography variant=\"body1\" color=\"initial\">Wait game to start</Typography>)\n                }\n                \n            </Grid>\n            <Grid item>\n                {\n                    Object.keys(players).map((key, index) => ( \n                        <p key={index}>{players[key]}</p> \n                      ))\n                }\n            </Grid>\n        </Grid>\n    )\n}\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":5,"column":10,"nodeType":"58","messageId":"59","endLine":5,"endColumn":12},{"ruleId":"56","severity":1,"message":"60","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":33},{"ruleId":"56","severity":1,"message":"61","line":19,"column":24,"nodeType":"58","messageId":"59","endLine":19,"endColumn":37},{"ruleId":"62","severity":1,"message":"63","line":22,"column":99,"nodeType":"64","endLine":22,"endColumn":101,"suggestions":"65"},{"ruleId":"52","replacedBy":"66"},{"ruleId":"54","replacedBy":"67"},{"ruleId":"56","severity":1,"message":"68","line":20,"column":19,"nodeType":"58","messageId":"59","endLine":20,"endColumn":27},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'io' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'setGameMovies' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'gameMovies.length'. Either include it or remove the dependency array.","ArrayExpression",["71"],["69"],["70"],"'setAdmin' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Update the dependencies array to be: [gameMovies.length]",{"range":"74","text":"75"},[842,844],"[gameMovies.length]"]